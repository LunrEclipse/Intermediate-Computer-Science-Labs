// funloops.cpp#include <iostream.h>void magicsquare (int n);long reverse (long number);int  lcm (int a, int b);main(){	cout << "Magic squares: ";	magicsquare (6);	cout << endl << endl;	cout << "12345 reversed ---> " << reverse (12345) << endl;	cout << "10001 reversed ---> " << reverse (10001) << endl;	cout << " 1200 reversed ---> " << reverse (1200) << endl;	cout << "    5 reversed ---> " << reverse (5) << endl << endl;	cout << "LCM (15,18) = " << lcm(15,18) << endl;	cout << "LCM (40,12) = " << lcm(40,12) << endl;	cout << "LCM (2,7) = " << lcm(2,7) << endl;	cout << "LCM (100,5) = " << lcm(100,5) << endl;	return 0;}void magicsquare (int n)/* strategy:  compare square and sum, if equal then print, else increase		appropriate value.  The values of square and sum will leap-frog		each other, occassionally landing on each other which means we		have found a magic square.  */{	long  square;			// to hold square of number	long  number = 1;    // used as source of square value	long  sum = 0;		   // running sum: 1,3,6,10,15,etc.	long  inc = 1;		   // used to get next running sum	int   count = 0;		// how many magic squares found	while (count < n)	{		square = number * number;		if (square == sum)		{			cout << square << "   ";			++count;			++number;	// get ready to find next one		}		else		{			if (sum < square)		// if sum is smaller than current square			{				sum += inc;				++inc;			}			else					// square is smaller, increment number				++number;		}	}}long reverse (long number){	long temp=0;	while (number != 0)	{		temp = temp*10 + (number % 10);		number /= 10;	}	return (temp);}int lcm (int a, int b){	int small, big, temp;	if (a<b)	{		small = a, big = b;	}	else	{		small = b, big = a;	}	temp = big;	while (temp % small != 0)		temp += big;	return (temp);}