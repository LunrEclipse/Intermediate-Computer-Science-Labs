//  ACSLLand Intermediate Division problem//  This program simulates a board game as described in the lab exercise.#include <iostream.h>#include <iomanip.h>#include <bool.h>void doATurn (int &active, int &passive, int value);void print (int piece);void playGame ();main (){	char choice;	cout << "ACSLLand Intermediate Division Problem" << endl;	do {		playGame ();		cout << endl << "Do you wish to play again (y/n)? ";		cin >> choice;	}	while (choice == 'Y' || choice == 'y' || choice == '\n');	cout << endl << endl;	return 0;}void doATurn (int &active, int &passive, int value)/* Precondition:  active is the piece number who is moving.		passive is the other piece.  Value is applied to active.	Postcondition: active has moved the appropriate number of values.		If active lands on passive, passive is moved back to start (1). */{	switch (value)	{		case 1:case 2:case 3:case 5:case 7:case 8:			active += value;			break;		case 4:case 6:			active -= value;			break;	}	if (active < 1) active = 1;	if (active > 41) active = 41;	if (active == passive) passive = 1;}void print (int piece){	if (piece == 1) cout << "START";	else if (piece == 41) cout << "END";	else cout << (piece-1);}void playGame ()/*  a,b will store integer positions 1..41	 count & turn are used to determine who's turn it is */{	int a=1, b=1, count=0, turn, value;  	bool  done = false;	cout << endl << endl;	cout << "Enter dice throws terminated by returns" << endl << endl;	do{		cout << "---> ";		cin >> value;		if (value > 0 && value <= 8)		{			++count;			turn = count % 2;			if (turn == 1) doATurn (a,b,value);			else doATurn (b,a,value);			if (a==41 || b==41) done = true;		}		else		{			done = true;			if (value != 0)				cout << endl << "Invalid input, game is over" << endl;		}	}	while (!done);	cout << endl << "A - ";	print(a);	cout << ", B - ";	print(b);	cout << endl;}