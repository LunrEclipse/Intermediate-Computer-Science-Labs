//  ACSLLand Senior Division problem//  This program simulates a board game as described in the lab exercise.#include <iostream.h>#include <iomanip.h>#include <bool.h>void doATurn (int &active, int &passive1, int &passive2,				  bool &skipTurn, bool &done);void print (int piece);void playGame ();main (){	char choice;	cout << "ACSLLand Senior Division Problem" << endl;	do {		playGame ();		cout << endl << "Do you wish to play again (y/n)? ";		cin >> choice;	}	while (choice == 'Y' || choice == 'y' || choice == '\n');	cout << endl << endl;	return 0;}void doATurn (int &active, int &passive1, int &passive2,				  bool &skipTurn, bool &done)/* Precondition:  active is the piece number who is moving.		passive1 and passive2 are the other pieces.		skipTurn will always be false.	Postcondition: active has moved the appropriate number of values.		If active lands on either passive, it is moved back to start (1).		If a 6 was rolled, skipTurn is returned true */{	int value;	cout << "---> ";	cin >> value;	if (value > 0 && value <= 8)	{		switch (value)		{			case 1:case 2:case 3:case 5:case 7:case 8:				active += value;				break;			case 4:				active -= value;				break;			case 6:				skipTurn = true;				break;		}	// end of switch		if (active < 1) active = 1;		else if (active > 31) active = 31;		if (active == passive1) passive1 = 1;		else if (active == passive2) passive2 = 1;	}	else	{		done = true;		if (value != 0)			cout << endl << "Invalid input, game is over" << endl;	}}void print (int piece){	if (piece == 1) cout << "START";	else if (piece == 31) cout << "END";	else cout << (piece-1);}void playGame ()/*  a,b,c will store integer positions 1..31	 count & turn are used to determine who's turn it is */{	int a=1, b=1, c=1, count=0, turn;	bool done=false, skipA=false, skipB=false, skipC=false;	cout << endl << endl;	cout << "Enter dice throws terminated by returns" << endl << endl;	do{		++count;		turn = count % 3;		switch (turn)		{			case 1:				if (skipA) skipA = false;				else doATurn (a,b,c,skipA,done);				break;			case 2:				if (skipB) skipB = false;				else doATurn (b,a,c,skipB,done);				break;			case 0:				if (skipC) skipC = false;				else doATurn (c,a,b,skipC,done);				break;		}		if (a==31 || b==31 || c==31) done = true;	}	while (!done);	cout << endl << "A - ";	print(a);	cout << ", B - ";	print(b);	cout << ", C - ";	print(c);	cout << endl;}