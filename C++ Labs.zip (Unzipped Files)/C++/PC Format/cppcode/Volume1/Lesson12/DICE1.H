// dice1.h/* class for simulating a die to generate an integer random number.dice(int sides) --	constructor, sides specifies number of "sides"	for the die, 2 for a coin, 6 for a regular die, etc.int roll() --	returns the random roll of the die, a (hopefully) uniformly	distributed random number between 1 and # of sidesint numSides() -- access function, returns # of sidesModeled after dice class from Owen Astrachan, Duke University.A Computer Science Tapestry, McGraw Hill, Custom College Series, © 1996.Last revised, Cary Matsuoka,  5/30/96  */#ifndef DICE_H#define DICE_H/* The Metrowerks version of dice.h requires a different process for initializing the   random number generator in stdlib.h.  We need to explicitly access the system clock to   get an initial long integer seed value. */   #include <stdlib.h>    // srand() and rand() are inside of stdlib.h#include <time.h>#include <limits.h>class dice{	public:		dice(int sides);		// constructor		int roll();				// return the random roll		int numSides();		// returns number of sides on die	private:		int mySides;};								// note semicolon after closing brace of classdice::dice(int sides)// postcondition:  all private fields initialized// randomize() called to set random number generator{	long time = clock();	int  seed = time % INT_MAX;		srand(seed);	mySides = sides;}int dice::roll()// postcondition: # of rolls updated, returns random die roll{	int temp;		temp = rand();		// rand() returns a integer ranging from 0-INT_MAX	temp %= mySides;	return temp+1;}int dice::numSides()// postcondition:  return # of sides of die{	return mySides;}#endif