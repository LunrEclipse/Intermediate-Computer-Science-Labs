/* recursion.cpp	This program will solve three algorithms:	1.  a recursive Fibonacci function	2.  a non-recursive Fibonacci function	3.  a recursive multiplication function  */#include <iostream.h>int  recFib (int  n);int  nonRecFib (int  n);int  mult (int a, int b);main (){	cout << "Recursive Fibonacci" << endl << endl;	cout << "Fib(0) = " << recFib(0) << endl;	cout << "Fib(3) = " << recFib(3) << endl;	cout << "Fib(11) = " << recFib(11) << endl << endl;	cout << "Non-recursive Fibonacci" << endl << endl;	cout << "Fib(1) = " << nonRecFib(1) << endl;	cout << "Fib(5) = " << nonRecFib(5) << endl;	cout << "Fib(14) = " << nonRecFib(14) << endl << endl;	cout << "Recursive Multiplication" << endl << endl;	cout << "Mult(0,4) = " << mult(0,4) << endl;	cout << "Mult(3,1) = " << mult(3,1) << endl;	cout << "Mult(7,8) = " << mult(7,8) << endl;	cout << "Mult(5,0) = " << mult(5,0) << endl;	cin.get();  // to freeze output screen	return 0;}int recFib (int n)//  solves for n! recursively, n >= 0{	if (n==0 || n==1) return (n);	else return (recFib(n-2) + recFib(n-1));}int nonRecFib (int n)//  solves for n! non-recursively, n >= 0{	int old, current, next, loop;	if (n == 0 || n == 1) return (n);	else	{		old = 0;		current = 1;		for (loop = 2; loop<=n; ++loop)		{			next = old + current;			old = current;			current = next;		}		return (current);	}}int mult (int a, int b)// solves for (a * b) recursively, adding a, b times// precondition: 0 <= a <= 10;  0 <= b <= 10;{	if (a == 0 || b == 0) return (0);	else		if (b == 1) return (a);		else return (a + mult(a,b-1));}