// compact.cpp/* This program will read a text file of integers, compact.txt, and	store it in an array.  All the zeroes in the array will be removed	and the list will be printed out both before and after the removal.	The data in the array will be stored from positions 0..howMany-1. */#include <iostream.h>#include <fstream.h>#include <apvector.h>#include <apstring.h>#include <stdlib.h>const apstring SOURCE = "c:\\ap98\\compact.txt";void readFile (apvector<int> &, int&);void printList (const apvector<int> &, int);void compact (apvector<int> &, int&);main (){	apvector<int> data(100);	int howMany;	readFile (data, howMany);	cout << "List before compact" << endl << endl;	printList (data, howMany);	compact (data, howMany);	cout << "List after compact" << endl << endl;	printList (data, howMany);	return 0;}void readFile (apvector<int> &list, int &number)// postcondition:  list contains data from 0..number-1, where number contains the//                 number of values in list.{	ifstream infile;	int value;   infile.open(SOURCE.c_str());   if (infile.fail())   {   	cerr << "Could not open " << SOURCE << endl;      abort();   }	number = 0;	while (infile >> value)	{		list[number] = value;		number++;	}}void printList (const apvector<int> &list, int number){	int loop;	for (loop=0; loop<number; ++loop)		cout << list[loop] << "  ";	cout << endl << endl;}void compact (apvector<int> &list, int &number)/*  Logic of algorithm.  Each value in the list is examined.  If a	non-zero element is found, it is moved to position pos, then pos	is incremented +1. */{	int  loop, pos=0;	for (loop=0; loop<number; loop++)		if (list[loop] != 0)		{			list[pos] = list[loop];			pos++;		}	number = pos;}