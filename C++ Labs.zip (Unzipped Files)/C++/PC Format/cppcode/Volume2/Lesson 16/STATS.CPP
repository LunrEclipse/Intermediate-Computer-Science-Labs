/*  statistics.cppThis program will read a file of integers and solve for the mean,standard deviation, and mode of the numbers.  These numbers rangein size from 0-100 and there are N <= 1000 numbers in the file.Two different arrays will be used to solve this problem.  One array,sized from 0-1000, will be used to store the numbers.  In this array,the data will be stored starting at position 0.  A second arraywill be sized from 0-100 to count the occurrences of each number.Program last revised on 4/9/97  */#include <iostream.h>#include <fstream.h>#include <iomanip.h>#include <math.h>#include <apvector.h>#include <apstring.h>#include <stdlib.h>const apstring SOURCE = "c:\\ap98\\numbers.txt";void loadFile (apvector<int> &, int&);double average (const apvector<int> &, int);double stdDev (const apvector<int> &, int);int findLargest (const apvector<int> &);void findMode (const apvector<int> &, int);double square (double);main (){	apvector<int> mainList (1000);	int number;	cout << setprecision(2) << setiosflags(ios::fixed);	loadFile (mainList, number);	cout << "The average = " << average(mainList, number) << endl << endl;	cout << "Standard deviation = ";	cout << stdDev (mainList,number) << endl << endl;	findMode (mainList,number);	return 0;}void loadFile (apvector<int> &data, int& howMany)/* Loads text file numbers.txt into vector data.  Values are stored from	positions 0..howMany-1.  Returns the number of data as howMany */{	ifstream  infile;	int  index=0;   infile.open(SOURCE.c_str());   if (infile.fail())   {   	cerr << "Could not open " << SOURCE << endl;      abort();   }	while (infile >> data[index])		index++;	howMany = index;}double average (const apvector<int> &data, int howMany)// returns average of values in vector data{	int index=0;	long total=0;	while (index < howMany)	{		total += data[index];		index++;	}	return (double(total)/howMany);}double stdDev (const apvector<int> &data, int howMany)// finds standard deviation of values in vector data{	double avg, sum=0, temp;	int index;	avg = average(data, howMany);	for (index=0; index < howMany; index++)		sum += square(data[index] - avg);	temp = double(sum)/(howMany-1);	return (sqrt(temp));}int findLargest (const apvector<int> &scores)/* finds the largest integer in vector scores.  This vector is sized from	0..100, with each element storing the quantity of each number from	0..100. */{	int tempBig=scores[0], index;	for (index=0; index<=100; index++)		if (scores[index] > tempBig)			tempBig = scores[index];	return (tempBig);}void findMode (const apvector<int> &data, int howMany)/* The vector data is analyzed and transferred into a smaller vector	smallList (0..100).  For each occurrence of n in vector data,	smallList[n] is incremented +1.  function Largest is then called	to find the largest quantity in vector smallList.  The mode(s)	is/are printed out. */{	int loop, largest;	apvector<int> smallList(101,0);	for (loop=0; loop<howMany; loop++)		smallList[data[loop]]++;	largest = findLargest(smallList);	cout << "The mode is(are) ---> ";	for (loop=0; loop<=100; loop++)		if (smallList[loop] == largest)			cout << loop << "   ";	cout << endl << endl;}double square (double n){	return (n * n);}