// craps.cpp// Simulates the game of craps.  A modified version of Owen Astrachan's// program, A Computer Science Tapestry, 1997, McGraw-Hill, p. 288.// Written on 4/10/97.#include <dice.h>#include <iostream.h>#include <bool.h>int  rollDice();bool getPoint(int point);bool winGame();dice die(6);  // global die, constructs die oncemain(){	int k, gamesWon = 0, gamesToPlay;	double percWon;		cout << "Enter number of games to play ---> ";	cin >> gamesToPlay;	for (k=0; k<gamesToPlay; k++)		if (winGame())			gamesWon++;	cout << "Games won = " << gamesWon << endl;	percWon = double(gamesWon)/gamesToPlay * 100;	cout << "% of games won = " << percWon << " %" << endl;	return 0;}bool winGame()//  returns true if a single game of craps is won, otherwise false{	int point = rollDice();		switch (point)	{		case 7: case 11: 			// cout << "7 or 11 rolled, win" << endl;			return true; 		case 2: case 3: case 12: 			// cout << "2, 3,or 12 rolled, lost" << endl;			return false; 		default: 			return getPoint(point);	}}bool getPoint (int point)//  precondition:  2 <= point <= 12//  postcondition:  returns true if point is matched, false if 7 is rolled first{	int sum;	do	{		sum = rollDice();	}	while ((sum != point) && (sum != 7));	// <--- application of DeMorgan's Laws/*	if (sum == point)		cout << "point is matched, player won" << endl;	else		cout << "crapped out" << endl;*/	return (sum == point);}int rollDice()// postcondition:  return sum of rolling two dice{	int first, second, sum;	first = die.roll();	second = die.roll();	sum = first + second;//	cout << first+second << endl;	return sum;}