// merge.cpp#include <iostream.h>#include <iomanip.h>#include <dice.h>#include <apvector.h>const int SIZE = 200;void fillArray (apvector<int> &temp);void screenOutput (const apvector<int> &temp);void selectionSort (apvector<int> &temp);void merge(const apvector<int> &a, const apvector<int> &b, apvector<int> &c);void swap (int &a, int &b);main(){	apvector<int> a(SIZE), b(SIZE), c(SIZE);	cout << "Filling list a" << endl << endl;	fillArray(a);	cout << endl << "Filling list b" << endl << endl;	fillArray(b);	selectionSort(a);	selectionSort(b);	merge(a,b,c);	cout << endl << "list a:  " << endl << endl;	screenOutput(a);	cout << "list b:  " << endl << endl;	screenOutput(b);	cout << "list c:  " << endl << endl;	screenOutput(c);	return 0;}void fillArray (apvector<int> &temp)/* Asks the user for two inputs:	1.  the number of data to generate.	2.  the largest possible random integer to create.	Then proceeds to fill the array, from 1..number, where number	is stored in temp[0]. */{	int  size;	cout << "How many numbers do you wish to generate? ";	cin >> temp[0];	cout << endl << "Largest integer to generate? ";	cin >> size;	cin.get();	dice die(size);	// allocate dice object	for (int loop=1; loop<=temp[0]; loop++)		temp[loop] = die.roll();}void screenOutput (const apvector<int> &temp)// prints out the contents of the vector in tabular form, 12 columns{	for (int loop=1; loop<=temp[0]; loop++)	{		cout << setw(4) << temp[loop];		if (loop % 20 == 0) cout << endl;	}	cout << endl;}void swap (int &a, int &b){	int temp = a;	a = b;	b = temp;}void selectionSort (apvector<int> &list){	int flag;	for (int outer=1; outer < list[0]; outer++)	{		flag = outer;		for (int inner=outer+1; inner<=list[0]; inner++)		{			if (list[inner] < list[flag])			{				flag = inner;			}		}		swap(list[outer], list[flag]);	}}void merge (const apvector<int> &a, const apvector<int> &b, apvector<int> &c){	int posA=1, posB=1;	c[0] = a[0] + b[0];	for (int posC=1; posC<=c[0]; posC++)	{		if (posA > a[0])  // done with list a, pull from b		{			c[posC] = b[posB];			posB++;		}		else if (posB > b[0])	// done with list b, pull from a		{			c[posC] = a[posA];			posA++;		}		else if (a[posA] <= b[posB])	// pull from list a		{			c[posC] = a[posA];			posA++;		}		else  // pull from list b		{			c[posC] = b[posB];			posB++;		}	}  // for loop}