// sorting template program#include <iostream.h>#include <iomanip.h>#include <dice.h>#include <apvector.h>#include <bool.h>const int SIZE = 500;void fillVector (apvector<int> &temp);void screenOutput (const apvector<int> &temp);void swap (int &a, int &b);void bubbleSort (apvector<int> &list);void selectionSort (apvector<int> &list);void insertionSort (apvector<int> &list);void mergeSort(apvector<int> &list, int, int);void quickSort (apvector<int> &list);void sortMenu (apvector<int> &temp);void merge(apvector<int> &a, int first, int mid, int last);main(){	apvector<int> a(SIZE+1);	sortMenu(a);	return 0;}void fillVector (apvector<int> &temp)/* Asks the user for two inputs:  1)  the number of data to generate, and 2) the largest possible random integer to create.  Then proceeds to fill the vector, from 1..number, where number is stored in temp[0]. */{	int  size;	cout << "How many numbers do you wish to generate? ";	cin >> temp[0];	cout << endl << "Largest integer to generate? ";	cin >> size;	dice die(size);	// allocate dice object	for (int loop=1; loop<=temp[0]; loop++)		temp[loop] = die.roll();}void screenOutput (const apvector<int> &temp)// prints out the contents of the vector in tabular form, 12 columns{	cout << setiosflags (ios::right) << endl;	for (int loop=1; loop<=temp[0]; loop++)	{		cout << setw(6) << temp[loop];		if (loop % 12 == 0) cout << endl;	}	cout << endl;}void swap (int &a, int &b){	int temp = a;	a = b;	b = temp;}void bubbleSort (apvector<int> &list){	cout << endl << "Bubble Sort" << endl << endl;}void selectionSort (apvector<int> &list){	cout << endl << "Selection Sort" << endl << endl;}void insertionSort (apvector<int> &list){	cout << endl << "Insertion Sort" << endl << endl;}void merge(apvector<int> &a, int first, int mid, int last)/*  Takes in entire array, but will merge the following sections	together:  Left sublist from a[first]..a[mid], right sublist from	a[mid+1]..a[last].  Precondition:  each sublist is already in	ascending order */{	int aPtr=first, bPtr=mid+1, cPtr=first;	int total=last-first+1, loop;	bool doneA = false, doneB = false;	apvector<int> c(SIZE+1);	for (loop=1; loop<=total; loop++)	{		if (doneA)		{			c[cPtr] = a[bPtr];			bPtr++;		}		else if (doneB)		{			c[cPtr] = a[aPtr];			aPtr++;		}		else if (a[aPtr] < a[bPtr])		{			c[cPtr] = a[aPtr];			aPtr++;		}		else		{			c[cPtr] = a[bPtr];			bPtr++;		}		cPtr++;		if (aPtr > mid) doneA = true;		if (bPtr > last) doneB = true;	}	// for loop	for (loop=first; loop<=last; loop++)		a[loop] = c[loop];}void mergeSort (apvector<int> &a, int first, int last){	int mid;	if (first == last);	// empty case, only 1 value, do nothing	else		if (first+1 == last)	// list of 2 values, swap if necessary		{			if (a[first] > a[last])				swap (a[first],a[last]);		}		else	// general case		{			mid = (first+last) / 2;			mergeSort (a,first,mid);			mergeSort (a,mid+1,last);			merge (a,first,mid,last);		}}void quickSort (apvector<int> &list){	cout << endl << "QuickSort" << endl << endl;}void sortMenu (apvector<int> &temp){	char choice, print;	do	{		cout << "Sorting algorithm menu" << endl << endl;		cout << "(1) Bubble sort" << endl;		cout << "(2) Selection sort" << endl;		cout << "(3) Insertion sort" << endl;		cout << "(4) Recursive mergesort" << endl;		cout << "(5) Quicksort" << endl;		cout << "(6) Quit" << endl << endl;		cout << "Choice ---> ";		cin >> choice;		cin.get();	// to dump return key		cout << endl;		if ('1'<=choice && choice<='5')		{			fillVector(temp);			switch (choice)			{				case '1' : bubbleSort(temp); break;				case '2' : selectionSort(temp); break;				case '3' : insertionSort(temp); break;				case '4' : mergeSort(temp,1,temp[0]); break;				case '5' : quickSort(temp); break;			}			cout << endl << "Print list to screen (y/n)? ";			cin >> print;			cin.get();			if (print == 'y' || print == 'Y')				screenOutput(temp);			cout << endl << "Hit return to continue ";			cin.get();		}	}	while (choice != '6');}