//  teststr.cpp//  Testing of the apstring class.#include <iostream.h>#include <apstring.h>#include <apvector.h>#include <fstream.h>#include <stdio.h>#include <stdlib.h>const apstring SOURCE = "c:\\ap98\\names.txt";void testConstructors();void testAssignment();void testAccessors();void testIndexing();void testModifiers();void testgetline();void testComparisons();void testConcat();void testSort();void swap (apstring &x, apstring &y);void selectionSort (apvector<apstring> &list, int n);apstring extractFirstWord (const apstring &s);void testExtract();main(){	testConstructors();	testAssignment();	testAccessors();	testIndexing();	testModifiers();	testgetline();	testComparisons(); 	testConcat();	testSort();	testExtract();	return 0;}void testConstructors(){	apstring word1;	apstring word2 ("Hello world");	apstring word3 ("Hello world\n");	cout << "Testing constructors" << endl << endl;	cout << word1;	cout << word2 << endl;	cout << word3;}void testAssignment(){	apstring w1 ("Hello world\n");	apstring w2, w3, w4;		w2 = w1;	w3 = "A C-style string\n";	w4 = 's';	cout << "w2 = " << w2;	cout << "w3 = " << w3;	cout << "w4 = " << w4;}void testAccessors(){	apstring w1 ("AP Computer Science");	apstring w2;	char* w3;	// a C-style string		cout << "Length of " << w1 << " = " << w1.length() << endl;	cout << "Starting location of Science = " << w1.find("Science") << endl;	cout << "First occurance of letter u = " << w1.find('u') << endl;	w2 = w1.substr(3,8);	cout << "w2 = " << w2 << endl;	w3 = w1.c_str();	puts (w3);		// tool in stdio.h to output a char* C-style string	}void testIndexing(){	apstring w1 ("C++ Programming");	int len, k;		len = w1.length();	for (k=0; k<len; k++)		cout << w1[k];		// indexing	cout << endl;	for (k=0; k<len; k++)  // if upper case, convert to lower case	if (('A'<= w1[k]) && (w1[k] <= 'Z'))		w1[k] += 32;	cout << w1 << endl;}void testModifiers(){	apstring w1 ("Cary ");	apstring w2 (" Matsuoka");		w1 += "J";	cout << w1 << endl;	w1 += w2;	cout << w1 << endl;}void testgetline(){	apstring w1;		cout << "Enter a string with spaces ---> ";	getline (cin,w1);	cout << "w1 using getline " << w1 << endl;} void testComparisons(){	apstring w1("San Jose"), w2("San Francisco");	apstring w3("hello"), w4("hello");		if (w1 < w2)		cout << w1 << " < " << w2 << endl;	else		cout << w1 << " > " << w2 << endl;	if (w3 == w4)		cout << w3 << " = " << w4 << endl;}void testConcat(){	apstring w1 ("Program");	apstring w2 ("ming\n");		w1 = w1 + w2;		// w1 = "Programming\n"	cout << w1 << endl;	w2 = '+';	w2 = 'C' + w2;	w2 = w2 + '+';		// w2 = "C++"	cout << w2 << endl;	w1 = w2 + ' ' + w1;	// w1 = "C++ Programming\n"	cout << w1 << endl;}void swap (apstring &x, apstring &y){	apstring temp = x;	x = y;	y = temp;}void selectionSort (apvector<apstring> &list, int n)// sorts apstrings stored from positions 0..n-1{	int outer, inner, flag;	for (outer=0; outer < n-2; outer++)	{		flag = outer;		for (inner=outer+1; inner<n; inner++)			if (list[inner] < list[flag])				flag = inner;		swap (list[outer],list[flag]);	}}void testSort(){	ifstream inFile;	int n, loop;   inFile.open(SOURCE.c_str());   if (inFile.fail())   {   	cerr << "Could not open " << SOURCE << endl;   	abort();   }	cout << "Testing sorting of names" << endl << endl;	inFile >> n;	apvector<apstring> family(n);	cout << "Before sorting" << endl << endl;	for (loop=0; loop<n; loop++)		inFile >> family[loop];	for (loop=0; loop<n; loop++)		cout << family[loop] << endl;	cout << endl << endl;	selectionSort (family,n);	for (loop=0; loop<n; loop++)		cout << family[loop] << endl;	cin.get();}apstring extractFirstWord (const apstring &s)// will extract first word from a string, delimiter will be space or return key{	const char SPACE = 32;		int pos;		pos = s.find(SPACE);	if (pos > 0)		return s.substr(0,pos);	else		return s;	// s is a single-word string}void testExtract(){	apstring w1, w2;		cout << "Enter a string with spaces ---> ";	getline(cin,w1);	w2 = extractFirstWord (w1);	cout << "First word = " << w2 << endl;}