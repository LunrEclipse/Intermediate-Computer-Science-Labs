// store.cpp#include <iostream.h>#include <apvector.h>#include <apstring.h>#include <bool.h>#include <iomanip.h>#include <fstream.h>#include <stdlib.h>const apstring SOURCE = "c:\\ap98\\file20.txt";struct item{	int id;	int inv;};struct storeType{	apvector<item> list;	int number;};void loadFile (storeType &store, apstring fileName);void printStore(const storeType &store);void swap (item &a, item &b);void quickSort (apvector<item> &list, int first, int last);ostream & operator<< (ostream &, const item &);main(){	storeType  store;	loadFile (store, SOURCE);	quickSort (store.list,0,store.number-1);	printStore (store);	return 0;}void loadFile (storeType &store, apstring fileName)//  precondition:  myList is uninitialized, will initialize myList with starting data{	ifstream in;	int loop;	char* fn;	// we need to convert fileName to a char* string for in.open	fn = fileName.c_str();	in.open(fn);	if (in.fail())	{		cerr << "Could not open " << fileName << endl;		abort();	}	in >> store.number;	store.list.resize (store.number);	for (loop=0; loop<store.number; loop++)		in >> store.list[loop].id >> store.list[loop].inv;}void printStore(const storeType &store){	int loop, line=1;	cout << setiosflags (ios::right);	cout << setw(15) << "Id" << setw(10) << "Inv" << endl << endl;	for (loop=0; loop<store.number; loop++)	{		cout << setw(5) << line << store.list[loop] << endl;		if (line % 10 == 0) cout << endl;		line++;	}}void  swap (item &a, item &b){	item temp = a;  a = b;  b = temp;}void quickSort (apvector<item> &list, int first, int last){	int g = first, h = last;	int midIndex;	int dividingValue;	midIndex = (first + last) / 2;	dividingValue = list[midIndex].id;	do	{		while (list[g].id < dividingValue) g++;		while (list[h].id > dividingValue) h--;		if (g <= h)		{			swap(list[g], list[h]);			g++;			h--;		}	}	while (h > g);	if (h > first) quickSort (list,first,h);	if (g < last) quickSort (list,g,last);}ostream & operator<< (ostream &out, const item &temp){	out << setw(10) << temp.id;	out << setw(10) << temp.inv;	return out;}