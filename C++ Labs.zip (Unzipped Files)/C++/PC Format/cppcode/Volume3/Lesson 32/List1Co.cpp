//  list1.cpp//  with struct constructors#include <iostream.h>#include <iomanip.h>struct listNode{	int  data;	listNode  *next;	listNode (int, listNode *);	};listNode::listNode(int tempData, listNode *tempNext)	: data(tempData), next(tempNext){	// all values initialized in initializer list}typedef listNode* nodePtr;struct listType{	nodePtr first;	nodePtr last;};	void createList (listType &);void printList (listType); main(){	listType list;	int k;		list.first = list.last = NULL;	createList (list);	printList (list);	return 0;}void createList (listType &temp){	for (int k=1; k<=20; k++)		if (NULL == temp.first)		// empty list case			temp.first = temp.last = new listNode (k,temp.first);		else		{			temp.last->next = new listNode (k,NULL);			temp.last = temp.last->next;		}}	void printList (listType local){	nodePtr temp = local.first;		cout << setiosflags (ios::right);	while (temp != NULL)	{		cout << setw(4) << temp->data;		temp = temp->next;	}	cout << endl;}	