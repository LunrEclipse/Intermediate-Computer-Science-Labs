//  treeStats.cpp//  Binary tree lab, Lesson 39#include <iostream.h>#include <iomanip.h>#include <fstream.h>#include <iomanip.h>#include <bool.h>#include <apstring.h>#include <stdlib.h>const apstring FILENAME = "c:\\ap98\\fileA.txt";struct treeNode{	char letter;	treeNode  *left, *right;	treeNode (char, treeNode *, treeNode *);};treeNode::treeNode (char tempLtr, treeNode *tempLeft, treeNode *tempRight)	: letter(tempLtr), left(tempLeft), right(tempRight){	// all values initialized in initializer list}typedef treeNode* treePtr;		void insert (treePtr &, char);void inorder (treePtr);void preorder (treePtr);void postorder (treePtr);int countNodes (treePtr);int countLeaves (treePtr);int height (treePtr);int width (treePtr);void clearTree (treePtr &);void readData (treePtr &);void mainMenu (treePtr &);int max (int, int);main(){	treePtr root;		root = NULL;	mainMenu (root);	return 0;}void insert (treePtr &temp, char c){	if (NULL == temp)		temp = new treeNode (c,NULL, NULL);	else if (c < temp->letter)		insert (temp->left, c);	else		insert (temp->right, c);}void inorder (treePtr temp){	if (temp != NULL)	{		inorder (temp->left);		cout << temp->letter;		inorder (temp->right);	}}void preorder (treePtr temp){	if (temp != NULL)	{		cout << temp->letter;		preorder (temp->left);		preorder (temp->right);	}}void postorder (treePtr temp){	if (temp != NULL)	{		postorder (temp->left);		postorder (temp->right);		cout << temp->letter;	}}int countNodes (treePtr temp){	if (NULL == temp) return 0;	else return  countNodes (temp->left) + 1 + countNodes (temp->right);}int countLeaves (treePtr temp){	if (NULL == temp)		return 0;	else if ((NULL == temp->right) && (NULL == temp->left))		return 1;	else		return countLeaves (temp->left) + countLeaves (temp->right);}int height (treePtr temp){	if (NULL == temp)		return 0;	else		return (max(1+height(temp->left), 1+height(temp->right)));}int width (treePtr root){	int temp;		if (NULL == root)		return 0;	temp = height(root->left) + 1 + height(root->right);	temp = max (temp, width(root->left));	return max (temp, width(root->right));}void clearTree (treePtr &p){	if (p != NULL)	{		clearTree (p->left);		clearTree (p->right);		delete p;		p = NULL;	}}int max (int a, int b){	if (a > b)		return a;	else		return b;}void readData (treePtr &temp){	ifstream inFile;	char c;		inFile.open(FILENAME.c_str());	if (inFile.fail())	{		cerr << "Could not open " << FILENAME << endl;		abort();	}	while (inFile >> c)		insert (temp, c);}void mainMenu (treePtr &root){	char choice;		cout << setiosflags (ios::right);	do	{		cout << "Binary tree menu" << endl << endl;		cout << "(1) Read " << FILENAME << " from disk" << endl;		cout << "(2) Print tree preorder" << endl;		cout << "(3) Print tree inorder" << endl;		cout << "(4) Print tree postorder" << endl;		cout << "(5) Count nodes in the tree" << endl;		cout << "(6) Count the leaves in the tree" << endl;		cout << "(7) Height of tree" << endl;		cout << "(8) Width of tree" << endl;		cout << "(9) Clear tree" << endl;		cout << "(Q/q) Quit" << endl << endl;		cout << "Choice ---> ";		cin >> choice;		cin.get();	// to dump return key		cout << endl;		if ('1'<=choice && choice<='9')		{			switch (choice)			{				case '1' : readData(root); break;				case '2' : 					cout << endl << "The tree printed preorder" << endl << endl;					preorder (root);					cout << endl;					break;				case '3' : 					cout << endl << "The tree printed inorder" << endl << endl;					inorder (root);					cout << endl;					break;				case '4' : 					cout << endl << "The tree printed postorder" << endl << endl;					postorder (root);					cout << endl;					break;				case '5' :					cout << endl << "Number of nodes in tree = ";					cout << countNodes (root) << endl << endl;					break;				case '6' :					cout << endl << "Number of leaves in tree = ";					cout << countLeaves (root) << endl << endl;					break;				case '7' :					cout << endl << "Height of tree = ";					cout << height (root) << endl << endl;					break;				case '8' :					cout << endl << "Width of tree = ";					cout << width (root) << endl << endl;					break; 				case '9' : clearTree (root); break;			}		}	}	while ((choice != 'Q') && (choice != 'q'));}