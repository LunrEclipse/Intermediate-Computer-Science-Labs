//  stack.cpp#include <iostream.h>#include <iomanip.h>#include <fstream.h>#include <iomanip.h>#include <bool.h>#include <apstring.h>#include <apstack.h>#include <stdlib.h>const apstring FILENAME = "c:\\ap98\\file20.txt";struct treeNode{	int  id, inv;	treeNode  *left, *right;	treeNode (int, int, treeNode*, treeNode*);};treeNode::treeNode (int tempId, int tempInv,                     treeNode *tempLeft, treeNode *tempRight)	: id(tempId), inv(tempInv), left(tempLeft), right(tempRight){	// all values initialized using initializer list}typedef treeNode* treePtr;	void insert (treePtr &, int, int);void inorder (treePtr);void readData (treePtr &);void mainMenu (treePtr &);main(){	treePtr root;		root = NULL;	readData (root);	cout << setiosflags(ios::right);	cout << setw(10) << "Id" << setw(10) << "Inv" << endl << endl;	inorder (root);	return 0;}void insert (treePtr &temp, int id, int inv){	if (NULL == temp)		temp = new treeNode (id, inv, NULL, NULL);	else		if (id < temp->id)			insert (temp->left, id, inv);		else			insert (temp->right, id, inv);}void inorder (treePtr root){	apstack<treePtr> stack;	treePtr temp = root;	int line = 0;		do	{		while (temp != NULL)		{			stack.push (temp);			temp = temp->left;		}		if (!(stack.isEmpty()))		{			stack.pop (temp);			cout << setw(10) << temp->id << setw(10) << temp->inv << endl;			line++;			if (line % 10 == 0) cout << endl;			temp = temp->right;		}	}	while ((temp != NULL) || (!(stack.isEmpty())));}void readData (treePtr &temp){	ifstream inFile;	int howMany, k, id, inv;		inFile.open(FILENAME.c_str());	if (inFile.fail())	{		cerr << "Could not open " << FILENAME << endl;		abort();	}	inFile >> howMany;	for (k=1; k<=howMany; k++)	{		inFile >> id >> inv;		insert (temp, id, inv);	}}	