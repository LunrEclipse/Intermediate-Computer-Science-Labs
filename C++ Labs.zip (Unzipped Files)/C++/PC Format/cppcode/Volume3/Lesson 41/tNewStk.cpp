//  testNewStack.cpp//  A test program to test the student newstack.h file#include <iostream.h>#include <newstack.h>#include <bool.h>void testPushPop();void testTop();void testCopyConstructor();void testPop();void testEqual();void testPopEmpty();main(){	testPushPop();	testTop();	testCopyConstructor();	testPop();	testEqual();	testPopEmpty();	return 0;}void testPushPop(){	apstack<int> s;	int k,temp;	bool ok = true;		for (k=1; k<=3; k++)		s.push(k);	if (s.length() == 3)		cout << "length function is correct" << endl << endl;	else		cout << "length function does not work" << endl << endl;	for (k=3; k>=1; k--)	{			s.pop(temp);		if (temp != k)		{			cout << "Problem with push/pop" << endl << endl;			ok = false;		}	}	if (ok) cout << "push/pop works fine" << endl << endl;}void testTop(){	apstack<char> s;	char c1 = 'a', c2 = 'b', c3;		s.push(c1);	s.push(c2);	c3 = s.top();	c3 = s.top();	if (c2 == c3)		cout << "top works fine" << endl << endl;	else		cout << "top did not work" << endl << endl;}void testCopyConstructor(){	apstack<int> s1;	int k, temp;	bool ok = true;		for (k=1; k<=3; k++)		s1.push(k);	apstack<int> s2 (s1);	k=3;	if (&s1 == &s2) cout << "memory problem in copy constructor" << endl << endl;	while (!s2.isEmpty())	{		s2.pop(temp);		if (temp != k)		{			cout << "problem with copy constructor" << endl << endl;			ok = false;		}		k--;	}	if (ok) cout << "copy constructor is fine" << endl << endl;}		void testPop(){	apstack<int> s;	int k, temp;		for (k=1; k<=3; k++)		s.push(k);	s.pop(temp);	s.pop();	s.pop(temp);	if (temp != 1) 		cout << "problem with pop()" << endl << endl;	else 		cout << "pop() works fine" << endl << endl;}void testEqual(){	apstack<int> s1, s2, s3;	int k, temp;	bool ok = true;		cout << "Testing operator = " << endl;		s2 = s1;	if (!s2.isEmpty())		cout << "   problem with =, NULL case" << endl;	else		cout << "   NULL case works fine" << endl;		s1.push(1);	s2 = s1;	if (&s2 == &s1)		cout << "   memory problem in =" << endl;	s2.pop(temp);	if (temp != 1)		cout << "   problem with one node case" << endl;	else		cout << "   one node case works fine" << endl;	s1.makeEmpty();		for (k=1; k<=3; k++)		s1.push(k);	s2 = s1;	if (s1.length() != s2.length())		cout << "   problem with lengths after s2 = s1 with 3 nodes" << endl;	if (&s2 == &s1)		cout << "   memory problem in =" << endl;	k=3;	while (!s2.isEmpty())	{		s2.pop(temp);		if (k != temp)		{			cout << "   error in three (3) node case" << endl;			ok = false;		}		k--;	}	if (ok) cout << "   three(3) node case works fine" << endl;	s1.makeEmpty();		for (k=1; k<=3; k++)		s1.push(k);	s1 = s1;	if (s1.length() == 3)		cout << "   s1 = s1 was handled correctly" << endl;	else		cout << "   s1 = s1 did something bad" << endl;	s1.makeEmpty();		for (k=1; k<=3; k++)		s1.push(k);	s3 = s2 = s1;	if (s2.length() == 3)		cout << "   in s3 = s2 = s1, s2 is okay" << endl;	else		cout << "   in s3 = s2 = s1, s2 is not okay" << endl;	if (&s3 == &s1)		cout << "   memory problem in =" << endl;	ok = true;	k=3;	while (!s3.isEmpty())	{		s3.pop(temp);		if (k != temp)		{			cout << "   error in s3 = s2 = s1" << endl;			ok = false;		}		k--;	}	if (ok) cout << "   s3 had three nodes from s3 = s2 = s1" << endl;	cout << endl;}	void testPopEmpty(){	apstack<int> s;		s.push(1);	s.pop();	s.pop();		// should cause an abort	cout << "popping an empty stack was not trapped" << endl;}