//  printByLevel.cpp#include <iostream.h>#include <fstream.h>#include <apstring.h>#include <apqueue.h>#include <stdlib.h>const apstring FILENAME = "c:\\ap98\\fileA.txt";struct treeNode{	char letter;	treeNode  *left, *right;	treeNode (char, treeNode *, treeNode *);};treeNode::treeNode (char tempLtr, treeNode *tempLeft, treeNode *tempRight)	: letter(tempLtr), left(tempLeft), right(tempRight){	// all values initialized in initializer list}typedef treeNode* treePtr;	void printByLevel (treePtr);void insert (treePtr &, char);void readData (treePtr &);void mainMenu (treePtr &);main(){	treePtr root;		root = NULL;	readData (root);	cout << "The tree printed by level: ";	printByLevel (root);	return 0;}void insert (treePtr &temp, char ch){	if (NULL == temp)		temp = new treeNode (ch,NULL,NULL);	else		if (ch < temp->letter)			insert (temp->left, ch);		else			insert (temp->right, ch);}void readData (treePtr &temp){		ifstream inFile;	char letter;	inFile.open(FILENAME.c_str());	if (inFile.fail())	{		cerr << "Could not open " << FILENAME << endl;		abort();	}	while (inFile >> letter)		insert (temp, letter);		}	void printByLevel (treePtr root){	apqueue<treePtr> q;	treePtr temp;		if (root != NULL)	{		q.enqueue (root);		while (!q.isEmpty())		{			q.dequeue(temp);			cout << temp->letter << " ";			if (temp->left != NULL)				q.enqueue(temp->left);			if (temp->right != NULL)				q.enqueue(temp->right);		}	}}