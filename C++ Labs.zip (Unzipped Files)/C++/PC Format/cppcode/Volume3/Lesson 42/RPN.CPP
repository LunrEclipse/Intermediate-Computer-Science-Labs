// calculator.cpp#include <iostream.h>#include <newstack.h>#include <apqueue.h>#include <bool.h>int doMath (int, int, char);bool isOperator (char);void printQueue (apqueue<char> problem);main(){	apstack<int> stack;	apqueue<char> list;	char input;	int current = 0, num1, num2;		do	{		cout << current << "  next input: ";		cin >> input;		list.enqueue(input);		if (isOperator(input))		{			if (stack.isEmpty())				num1 = 0;			else				stack.pop(num1);			if (stack.isEmpty())				num2 = 0;			else				stack.pop(num2);			current = doMath (num2, num1, input);			stack.push (current);		}		else if (('0'<=input) && (input<='9'))		{			current = input - 48;			stack.push (current);		}	}	while ((input != 'Q') && (input != 'q'));	cout << endl;	printQueue (list);	cout << "= " << current << endl;	return 0;}	int doMath (int num1, int num2, char op)/* Solve math in this order:  num1 + num2, num1 - num2, num1 * num2, or num1 / num2	Does integer mathematics for / operator */{	if ('+' == op)		return num1 + num2;	else if ('-' == op)		return num1 - num2;	else if ('*' == op)		return num1 * num2;	else		return num1 / num2;}bool isOperator (char op){	if (('+' == op) || ('-' == op) || ('*' == op) || ('/' == op))		return true;	else		return false;}void printQueue (apqueue<char> problem)// prints out the queue until empty{	char c;		while (!(problem.isEmpty()))	{		problem.dequeue(c);		if ((c != 'q') && (c != 'Q'))			cout << c << " ";	}}	